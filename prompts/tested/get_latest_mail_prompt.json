{"stage1_CD": [{"role": "user", "content": "\u8bf7\u5e2e\u6211\u67e5\u4e0bQQ\u90ae\u7bb1\u91cc\u6700\u540e\u4e00\u5c01\u90ae\u4ef6\u5185\u5bb9\u3002"}, {"role": "assistant", "content": "\u5f53\u524d\u9700\u6c42\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u662f\uff1a1.\u67e5\u770b\u8c01\u7684\u90ae\u7bb1\u30022.\u90ae\u4ef6\u7c7b\u578b\u662f\u672a\u8bfb\u8fd8\u662f\u5168\u90e8"}], "stage1_CM": [{"role": "user", "content": "\u8bf7\u5e2e\u6211\u67e5\u4e0bQQ\u90ae\u7bb1\u91cc\u6700\u540e\u4e00\u5c01\u90ae\u4ef6\u5185\u5bb9\u3002\u5f53\u524d\u9700\u6c42\u4e2d\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u7684\u662f\uff1a1.\u67e5\u770b\u8c01\u7684\u90ae\u7bb1\u30022.\u90ae\u4ef6\u7c7b\u578b\u662f\u672a\u8bfb\u8fd8\u662f\u5168\u90e8"}, {"role": "assistant", "content": "\u8bf7\u5e2e\u6211\u7f16\u5199\u4e00\u4e2apython\u51fd\u6570\uff0c\u7528\u4e8e\u67e5\u770b\u6211\u7684QQ\u90ae\u7bb1\u4e2d\u6700\u540e\u4e00\u5c01\u90ae\u4ef6\u4fe1\u606f\uff0c\u51fd\u6570\u8981\u6c42\u5982\u4e0b\uff1a                 1.\u51fd\u6570\u53c2\u6570from_address: \u5fc5\u8981\u53c2\u6570\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53d1\u4ef6\u65b9\u7684\u90ae\u7bb1\u5730\u5740\uff1b                 2.\u51fd\u6570\u53c2\u6570type\uff0c\u8868\u793a\u67e5\u8be2\u7684\u7c7b\u578b\uff0c\u5305\u542bAll\u6216\u8005Unseen\u4e24\u7c7b\uff0c\u9ed8\u8ba4\u4e3aAll\u4ee3\u8868\u5168\u90e8\u7684\u90ae\u4ef6\uff0cUnseen\u4ee3\u8868\u7684\u662f\u672a\u8bfb\u90ae\u4ef6\uff1b                 3.\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5305\u542b\u67e5\u8be2\u90ae\u4ef6\u4fe1\u606f\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u7ed3\u679c\u672c\u8eab\u5fc5\u987b\u662f\u4e00\u4e2ajson\u683c\u5f0f\u5bf9\u8c61\uff1b                 4.\u8bf7\u5c06\u5168\u90e8\u529f\u80fd\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\uff1b                 5.\u8bf7\u5728\u51fd\u6570\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u5728\u51fd\u6570\u5185\u90e8\u52a0\u5165\u4e2d\u6587\u7f16\u5199\u7684\u8be6\u7ec6\u7684\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff0c\u7528\u4e8e\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u3001\u51fd\u6570\u53c2\u6570\u60c5\u51b5\u4ee5\u53ca\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u7b49\u4fe1\u606f\uff1b\u5176\u4e2d\u53c2\u6570\u9700\u8981\u9075\u5faa@param:\uff0c\u8fd4\u56de\u503c\u9700\u8981\u9075\u5faa@return:\u5f00\u59cb"}], "stage2": [{"role": "user", "content": "\u8bf7\u5e2e\u6211\u7f16\u5199\u4e00\u4e2apython\u51fd\u6570\uff0c\u7528\u4e8e\u67e5\u770b\u6211\u7684QQ\u90ae\u7bb1\u4e2d\u6700\u540e\u4e00\u5c01\u90ae\u4ef6\u4fe1\u606f\uff0c\u51fd\u6570\u8981\u6c42\u5982\u4e0b\uff1a                 1.\u51fd\u6570\u53c2\u6570from_address: \u5fc5\u8981\u53c2\u6570\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53d1\u4ef6\u65b9\u7684\u90ae\u7bb1\u5730\u5740\uff1b                 2.\u51fd\u6570\u53c2\u6570type\uff0c\u8868\u793a\u67e5\u8be2\u7684\u7c7b\u578b\uff0c\u5305\u542bAll\u6216\u8005Unseen\u4e24\u7c7b\uff0c\u9ed8\u8ba4\u4e3aAll\u4ee3\u8868\u5168\u90e8\u7684\u90ae\u4ef6\uff0cUnseen\u4ee3\u8868\u7684\u662f\u672a\u8bfb\u90ae\u4ef6\uff1b                 3.\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u662f\u4e00\u4e2a\u5305\u542b\u67e5\u8be2\u90ae\u4ef6\u4fe1\u606f\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u7ed3\u679c\u672c\u8eab\u5fc5\u987b\u662f\u4e00\u4e2ajson\u683c\u5f0f\u5bf9\u8c61\uff1b                 4.\u8bf7\u5c06\u5168\u90e8\u529f\u80fd\u5c01\u88c5\u5728\u4e00\u4e2a\u51fd\u6570\u5185\uff1b                 5.\u8bf7\u5728\u51fd\u6570\u7f16\u5199\u8fc7\u7a0b\u4e2d\uff0c\u5728\u51fd\u6570\u5185\u90e8\u52a0\u5165\u4e2d\u6587\u7f16\u5199\u7684\u8be6\u7ec6\u7684\u51fd\u6570\u8bf4\u660e\u6587\u6863\uff0c\u7528\u4e8e\u8bf4\u660e\u51fd\u6570\u529f\u80fd\u3001\u51fd\u6570\u53c2\u6570\u60c5\u51b5\u4ee5\u53ca\u51fd\u6570\u8fd4\u56de\u7ed3\u679c\u7b49\u4fe1\u606f\uff1b\u5176\u4e2d\u53c2\u6570\u9700\u8981\u9075\u5faa@param:\uff0c\u8fd4\u56de\u503c\u9700\u8981\u9075\u5faa@return:\u5f00\u59cb"}, {"role": "assistant", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# @Time    : 2024/6/2 17:25\n# @Author  : \u4f5c\u8005\u540d\n# @File    : get_latest_mail_module.py\n# @Description  :\nimport os\nimport imaplib\nimport email\nfrom email.header import decode_header\nimport json\n\n\ndef get_latest_mail(from_address, type='Unseen'):\n    \"\"\"\n    \u8be5\u51fd\u6570\u7528\u4e8e\u67e5\u8be2\u90ae\u7bb1\u4e2d\u662f\u5426\u6709\u6765\u81ea\u6307\u5b9a\u53d1\u4ef6\u4eba\u7684\u672a\u8bfb\u90ae\u4ef6\uff0c\u5e76\u89e3\u8bfb\u6700\u8fd1\u4e00\u5c01\u672a\u8bfb\u90ae\u4ef6\u7684\u5185\u5bb9\u3002\n    @param from_address: \u5fc5\u8981\u53c2\u6570\uff0c\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53d1\u4ef6\u65b9\u7684\u90ae\u7bb1\u5730\u5740\u3002\n    @param type: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u67e5\u8be2\u7684\u7c7b\u578b\uff0c\u5305\u542bAll\u6216\u8005Unseen\u4e24\u7c7b\uff0c\u9ed8\u8ba4\u4e3aAll\u4ee3\u8868\u5168\u90e8\u7684\u90ae\u4ef6\uff0cUnseen\u4ee3\u8868\u7684\u662f\u672a\u8bfb\u90ae\u4ef6\u3002\n    @return: json\u683c\u5f0f\u5bf9\u8c61\uff0c\u5305\u542b\u67e5\u8be2\u90ae\u4ef6\u7684\u72b6\u6001\u548c\u6700\u8fd1\u4e00\u5c01\u672a\u8bfb\u90ae\u4ef6\u7684\u5185\u5bb9\u3002\n    \"\"\"\n\n    # \u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\u90ae\u7bb1\u5730\u5740\u548c\u6388\u6743\u7801\n    email_address = os.getenv('QQ_EMAIL_ADDRESS')\n    email_password = os.getenv('QQ_MAIL_KEY')\n\n    # \u8fde\u63a5\u5230QQ\u90ae\u7bb1\u7684IMAP\u670d\u52a1\u5668\n    imap_host = 'imap.qq.com'\n    mail = imaplib.IMAP4_SSL(imap_host)\n    mail.login(email_address, email_password)\n\n    # \u9009\u62e9\u6536\u4ef6\u7bb1\n    mail.select('inbox')\n\n    # \u6839\u636e\u67e5\u8be2\u7c7b\u578b\u8bbe\u7f6e\u641c\u7d22\u6761\u4ef6\n    search_criteria = 'ALL'\n    if type == 'Unseen':\n        search_criteria = 'UNSEEN'\n\n    # \u641c\u7d22\u7b26\u5408\u6761\u4ef6\u7684\u90ae\u4ef6\n    status, messages = mail.search(None, f'(FROM \"{from_address}\" {search_criteria})')\n\n    # \u83b7\u53d6\u90ae\u4ef6ID\u5217\u8868\n    mail_ids = messages[0].split()\n\n    result = {\n        'status': 'No new emails',\n        'recent_email': None\n    }\n\n    if mail_ids:\n        # \u53d6\u51fa\u6700\u65b0\u7684\u4e00\u5c01\u90ae\u4ef6ID\n        recent_mail_id = mail_ids[-1]\n\n        # \u83b7\u53d6\u90ae\u4ef6\u6570\u636e\n        status, data = mail.fetch(recent_mail_id, '(RFC822)')\n\n        # \u89e3\u6790\u90ae\u4ef6\u5185\u5bb9\n        msg = email.message_from_bytes(data[0][1])\n        subject, encoding = decode_header(msg['Subject'])[0]\n        if isinstance(subject, bytes):\n            subject = subject.decode(encoding)\n\n        from_ = msg.get('From')\n\n        # \u5982\u679c\u90ae\u4ef6\u662fmultipart\u7c7b\u578b\n        if msg.is_multipart():\n            for part in msg.walk():\n                content_type = part.get_content_type()\n                content_disposition = str(part.get(\"Content-Disposition\"))\n                try:\n                    body = part.get_payload(decode=True).decode()\n                except:\n                    pass\n                if content_type == \"text/plain\" and \"attachment\" not in content_disposition:\n                    result['status'] = 'Unread email found'\n                    result['recent_email'] = {\n                        'from': from_,\n                        'subject': subject,\n                        'body': body\n                    }\n                    break\n        else:\n            content_type = msg.get_content_type()\n            body = msg.get_payload(decode=True).decode()\n            if content_type == \"text/plain\":\n                result['status'] = 'Unread email found'\n                result['recent_email'] = {\n                    'from': from_,\n                    'subject': subject,\n                    'body': body\n                }\n\n    mail.logout()\n\n    return json.dumps(result, ensure_ascii=False)\n"}]}